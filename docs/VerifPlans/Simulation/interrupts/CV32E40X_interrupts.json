[
    {
        "Requirement Location": "UM ac0641d",
        "Feature": "Interrupt Interface",
        "Sub Feature": "Interrupt ack pulse",
        "Feature Description": "Interrupt acknowledge is always a pulse",
        "Verification Goal": "assert that irq_ack is always a pulse",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "TODO update to non-\"_o\" assertions, when it is fixed",
        "": ""
    },
    {
        "Requirement Location": "UM ac0641d",
        "Feature": "Interrupt Interface",
        "Sub Feature": "Interrupt ack valid",
        "Feature Description": "Interrupt acknowledge is only asserted when a valid interrupt has been taken by the core.\nThis acknowledge is used to signal interrupts to the ISS to ensure that the proper MTVEC addressed is entered.",
        "Verification Goal": "irq_ack never asserted unless processor has taken an interrupt",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM ac0641d",
        "Feature": "Interrupt Interface",
        "Sub Feature": "Single interrupt ack per ISR",
        "Feature Description": "Interrupt acknowledge only asserted once per interrupt",
        "Verification Goal": "irq_ack only asserts once for an interrupt service period",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM ac0641d",
        "Feature": "Interrupt Interface",
        "Sub Feature": "Interrupt ID is valid",
        "Feature Description": "Interrupt valid ID matches the active interrupt during the cycle where interrupt acknowledge is asserted",
        "Verification Goal": "Ensure that irq_id is the active interrupt when irq_ack is asserted",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32_tb.dut_wrap.cv32e40p_wrapper_i.core_i.interrupt_assert_i,a_irq_arb",
        "": ""
    },
    {
        "Requirement Location": "UM ac0641d",
        "Feature": "Interrupt Interface",
        "Sub Feature": "Interrupt ID never reserved",
        "Feature Description": "Interrupt valid ID during interrupt acknowledge is never a reserved interrupt [15,14,13,12,10,9,8,6,5,4,2,1,0]",
        "Verification Goal": "Assert irq_id is not a reserved valid when irq_ack is asserted",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "TODO update to non-\"_o\" assertions, when it is fixed",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt interface",
        "Sub Feature": "Level Sensitive",
        "Feature Description": "All interrupt lines are level-sensitive.",
        "Verification Goal": "All assertions and modeling of interrupts for checking assume no edges required to qualify an interrupt.",
        "Pass/Fail Criteria": "Any/All",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "Silabs internal",
        "Feature": "Interrupt interface",
        "Sub Feature": "NMI",
        "Feature Description": "NMI is not reported on irq_ack",
        "Verification Goal": "Check that after an NMI is triggered, if there is no other interrupt occuring, then there should be no irq_ack",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "Silabs internal",
        "Feature": "Interrupt interface",
        "Sub Feature": "RVFI",
        "Feature Description": "Every irq_ack must be followed by a corresponding rvfi_intr",
        "Verification Goal": "Check that whenever and irq_ack occurs, then the next rvfi retired instruction must have rvfi_intr high",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt arbitration",
        "Sub Feature": "Priority",
        "Feature Description": "When multiple interrupts are enabled and pending, the highest-indexed interrupt will always win, with the exception of the timer [7], which is always lowest priority",
        "Verification Goal": "Model arbitration in an assertion to ensure priority",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32_tb.dut_wrap.cv32e40p_wrapper_i.core_i.interrupt_assert_i,a_irq_arb",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Eventually taken",
        "Sub Feature": "",
        "Feature Description": "An interrupt that is both pending and enabled shall be taken, unless if the core is in debug mode or is blocked by external interfaces (rvalid, fence_flush_ack, etc), and the taking happens within a fixed number of cycles",
        "Verification Goal": "Check that when conditions are right, then the interrupt gets taken within expected time",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "interrupt pending becoming enabled",
        "Sub Feature": "",
        "Feature Description": "When mip is already set when the interrupt is enabled, the trap occurs immediately.",
        "Verification Goal": "Assert that no instruction is executed between the interrupt being enabled(CSR write or xRET) and the interrupt being taken. Ideally verify with Formal\n\nNOTE: this feature is meant to cover the case which triggered the bug in github issue #325. ",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Bootstrap MTVEC",
        "Feature Description": "MTVEC can be bootstrapped via mtvec_addr_i to an initial 32-bit value upon reset",
        "Verification Goal": "MTVEC can be programmed via the bootstrap without explicitly writing the CSR",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC \"interrupt_bootstrap_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Vector base address",
        "Feature Description": "MTVEC can be programmed to any valid instruction address aligned to a 256-byte boundary",
        "Verification Goal": "Ensure that multiple MTVEC values are tested.",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Direct mode",
        "Feature Description": "Core jumps to PC at MTVEC directly when interrupted an MTVEC[0] == DIRECT (0)",
        "Verification Goal": "PC value upon taking interrupt when MTVEC[0] == 0 is {MTVEC[31:8], 8'h0}",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Vectored mode",
        "Feature Description": "Core jumps to PC at MTVEC + interrupt*4 directly when interrupted an MTVEC[0] == VECTORED (1)",
        "Verification Goal": "PC value upon taking interrupt when MTVEC[0] == 1 is {MTVEC[31:8], 8'h0} * interrupt_cause * 4",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Nested interrupt",
        "Feature Description": "Nested ISRs may be supported by manually saving MEPC and MSTATUS, then re-enabling desired interrupts.",
        "Verification Goal": "Implement a nested ISR and ensure that manual save, restore of MSTATUS, MEPC work as intended.",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Nested interrupt lower priority",
        "Feature Description": "Nested interrupt can be re-interrupt by lower or higher priority",
        "Verification Goal": "Implement a nested ISR and ensure that manual save, restore of MSTATUS, MEPC work as intended.  Ensure that the nested interrupts come from both higher and/or lower priority interrupts.",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Nested interrupt masked",
        "Feature Description": "Nested interrupt will not be re-interrupted if MIE masks off an interrupt.",
        "Verification Goal": "Implement a nested ISR and ensure that manual save, restore of MSTATUS, MEPC work as intended.  Try to nest interrupts with masked interrupts via MIE, but ensure no interrupt taken.",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Nested interrupt",
        "Feature Description": "The hardware automatically disables interrupts upon entering an interrupt/exception handler.",
        "Verification Goal": "Trigger interrupt prior to handler re-enabling interrupts. ",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MSTATUS MPIE restore",
        "Feature Description": "Upon interrupt exit, MSTATUS.MIE must be restored with MSTATUS.MPIE",
        "Verification Goal": "Manipulate MPIE during an ISR and ensure that MSTATUS.MIE reflects this value after MRET instruction",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MSTATUS MPIE save",
        "Feature Description": "MPIE contains the previous machine interrupt enable value upon interrupt entry",
        "Verification Goal": "MPIE contains value of MSTATUS.MIE upon ISR entry",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MSTATUS MIE disable",
        "Feature Description": "Interrupts may never be taken if MSTATUS.MIE is cleared",
        "Verification Goal": "Upon each interrupt ISR entry MSTATUS.MIE must be asserted",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "TODO update to non-\"_o\" assertions, when it is fixed",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MCAUSE reserved values",
        "Feature Description": "MCAUSE exception code is never set to a reserved interrupt [15,14,13,12,10,9,8,6,5,4,2,1,0]",
        "Verification Goal": "MCAUSE exception code is never a reserved interrupt value",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "TODO update to non-\"_o\" assertions, when it is fixed",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MCAUSE exception code",
        "Feature Description": "MCAUSE exception code is set to the active interrupt code",
        "Verification Goal": "MCAUSE is the active interrupt",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MCAUSE interrupt flag",
        "Feature Description": "MCAUSE bit 31 is always set during ISR regardless of the active interrupt",
        "Verification Goal": "MCAUSE[31] is set in interrupt.",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt CSR",
        "Sub Feature": "PC Capture",
        "Feature Description": "When taking an interrupt, the current PC is saved in MEPC",
        "Verification Goal": "\nEnsure that MEPC in ISR is value of saved PC.",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt CSR",
        "Sub Feature": "EPC Change",
        "Feature Description": "MEPC can be altered during ISR",
        "Verification Goal": "Take an interrupt, change the MEPC to another PC value, and ensure that PC is used after MRET",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt CSR",
        "Sub Feature": "PC alignment",
        "Feature Description": "MEPC may capture a 16-bit aligned or 32-bit aligned instruction",
        "Verification Goal": "Check that compressed instructions and non-compressed instructions are being interrupted",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MIP valid",
        "Feature Description": "When an interrupt is asserted externally, the corresponding bit is MIP is asserted",
        "Verification Goal": "Ensure that MIP reflects irq_i inputs",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32_tb.dut_wrap.cv32e40p_wrapper_i.core_i.interrupt_assert_i.a_mip_irq_i",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MIP reserved",
        "Feature Description": "MIP bits corresponding to reserved interrupts are never asserted",
        "Verification Goal": "Assert that MIP bits on reserved interrupts are not asserted",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32_tb.dut_wrap.cv32e40p_wrapper_i.core_i.interrupt_assert_i.a_mip_not_reserved",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MIE valid",
        "Feature Description": "When an ISR is entered, the active interrupt must have the corresponding bit in MIE asserted",
        "Verification Goal": "Upon each interrupt ISR entry the active interrupt's MIE bit must be set",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "TODO update to non-\"_o\" assertions",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MIE assert during interrupt",
        "Feature Description": "Interrupts can be taken when MIE is asserted and irq_i is asserted",
        "Verification Goal": "For a disabled interrupt (via MIE) that is asserted, ensure the interrupt can be taken if MIE is written high",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32_tb.dut_wrap.cv32e40p_wrapper_i.core_i.interrupt_assert_i.gen_irq_cov[*].c_irq_masked_then_enabled",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MIE combinations",
        "Feature Description": "MIE masking works as expected with all legal combinations of asserted bit",
        "Verification Goal": "All values of MIE are tested",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32_tb.dut_wrap.cv32e40p_wrapper_i.core_i.interrupt_assert_i.gen_irq_cov[*].c_irq_taken",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MSTATUS[MIE] and MIE",
        "Feature Description": "Both MSTATUS[MIE] and corresponding bit in MIE must be set to service an interrupt.",
        "Verification Goal": "Check permutations of MSTATUS[MIE] and MIE",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO update to non-\"_o\" assertions",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt CSR",
        "Sub Feature": "MSTATUS[MIE] and MIE",
        "Feature Description": "After reset, all interrupts are disabled.",
        "Verification Goal": "MSTATUS[MIE]=0 and MIE=0 after reset.",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "WFI ",
        "Sub Feature": "Entry",
        "Feature Description": "Execution of WFI causes the core to stop",
        "Verification Goal": "In normal execution the core stop within a certain time period after execution.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "WFI ",
        "Sub Feature": "Clock gating",
        "Feature Description": "WFI entry causes the clock gate to be disabled",
        "Verification Goal": "The core is not clocked during WFI",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "WFI ",
        "Sub Feature": "Output signal",
        "Feature Description": "core_sleep_o output signal is only asserted during active WFI",
        "Verification Goal": "Assert the proper operation of core_sleep_o",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32_tb.dut_wrap.cv32e40p_wrapper_i.core_i.interrupt_assert_i,a_wfi_assert_core_sleep_o",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "WFI ",
        "Sub Feature": "Exit",
        "Feature Description": "WFI is exitted and normal operation occurs if an enabled interrupt becomes pending",
        "Verification Goal": "WFI is exitted within a 40 free-running clcoks after a valid wakeup event",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32_tb.dut_wrap.cv32e40p_wrapper_i.core_i.interrupt_assert_i,a_wfi_wake_to_instr_fetch",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "WFI ",
        "Sub Feature": "Exit with global MIE disable",
        "Feature Description": "WFI must exit if an enabled interrupt becomes pending even if the status MIE is disabled",
        "Verification Goal": "WFI exit occurs due to a pending enabled interrupts when MSTATUS.MIE == 0",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32_tb.dut_wrap.cv32e40p_wrapper_i.core_i.interrupt_assert_i,gen_wfi_cov[*].c_wfi_wake_mstatus_mie_0",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "WFI ",
        "Sub Feature": "Back to back WFI",
        "Feature Description": "Ensure second WFI in a sequence waits after servicing first interrupt",
        "Verification Goal": "In embedded context WFI is used often, ensure that WFI can be re-entered ASAP after servicing a ISR for a previous WFI",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC \"interrupt_test\"",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "WFI ",
        "Sub Feature": "Exit interrupt",
        "Feature Description": "Any machine-mode interrupt can cause a WFI exit",
        "Verification Goal": "Exit interrupt coverage",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32_tb.dut_wrap.cv32e40p_wrapper_i.core_i.interrupt_assert_i,gen_wfi_cov[*].c_wfi_wake_mstatus_mie_*",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit Load instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit Store instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit Shift instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit logical instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit compare instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit jump instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit FENCE instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit system instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BEQ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BEQ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BNE instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BNE instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BLT instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BLT instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BGE instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BGE instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BLTU instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BLTU instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BGEU instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BGEU instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit load instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit store instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit arithmetic instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit shift instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit jump instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit system instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken C.BEQZ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken C.BEQZ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken C.BNEZ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken C.BNEZ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 M instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 A instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 P instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zba instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zbb instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zbc instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zbs instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zicsr instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "CG: uvm_pkg.uvm_test_top.env.cov_model.interrupt_covg.cg_irq_entry",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zifencei instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zce instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All X interface instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Illegal instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Killed instructions have no side-effects",
        "Feature Description": "When an instruction is interrupted, it is killed, meaning that it has no side-effects: 1) load/store instructions don't reach the bus, 2) control transfer instructions don't jump, 3) CSRs don't get updated, 4) GPRs don't get updated",
        "Verification Goal": "Check that bus, jumps, and registers are unaffected by killed instructions",
        "Pass/Fail Criteria": "Check against ISS",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "rvfi_intr interrupt taken",
        "Feature Description": "rvfi_intr must be high on the first reported instruction after an interrupt is taken and the handler is being executed",
        "Verification Goal": "Check that when an interrupt is taken, when rvfi shows the first instruction of the handler retiring, then rvfi_intr is high",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "rvfi_intr  exception taken",
        "Feature Description": "rvfi_intr must be high on the first reported instruction after a synchronous is taken and the handler is being executed",
        "Verification Goal": "Check that after rvfi reports rvfi_trap, and if the next executed instruction is the handler (i.e. no debug entry etc), then rvfi_intr is high",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "rvfi_intr debug entry",
        "Feature Description": "rvfi_intr CAN be high on the first instruction of debug entry if the entry was caused by external debug request or single stepping, and if it is then mepc shall have been updated correctly",
        "Verification Goal": "Check that when an interrupt has been acknowledged (and mepc updated), but debug entry intercepted the running of the interrupt handler, then rvfi_intr is high",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "rvfi_intr default",
        "Feature Description": "Whenever rvfi_intr is qualified by rvfi_valid and there is no explicit reason for it to be high, it shall be low",
        "Verification Goal": "Check that when there is no reason (no interrupt ack, no rvfi_trap, etc) then rvfi_intr doesn't give any false alarm",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "rvfi_intr qualified by rvfi_valid",
        "Feature Description": "rvfi_intr is a don't-care whenever rvfi_valid is low (this is true for all rvfi signals but is mentioned explicitly here for rvfi_intr)",
        "Verification Goal": "(We don't need to check the non-qualified don't-care values)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "rvfi_intr pc mismatch",
        "Feature Description": "When rvfi_pc_rdata doesn't match the previous instruction's rvfi_pc_wdata, then rvfi_intr must be high, or rvfi_dbg must be non-zero",
        "Verification Goal": "Check that either rvfi_intr or rvfi_dbg is always present whenever rvfi_pc_rdata doesn't match the previous rvfi_pc_wdata",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "rvfi_dbg interrupt handler",
        "Feature Description": "When reporting the first instruction of an interrupt handler, then rvfi_dbg must be zero",
        "Verification Goal": "Check that upon interrupt taken, when the first instruction of the handler is executed, then rvfi_dbg is zero",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "CSRs",
        "Feature Description": "All of the CSR features can be seen on the rvfi csr signals",
        "Verification Goal": "(As long as the rvfi csr interface is separately verified we don't need to verify anything extra here, but in theory all of the csr checks above could additionally be checked via the rvfi interface)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "Interrupts happen between instructions",
        "Feature Description": "Unlike exceptions, interrupts are not modelled as happening on the retired instructions, but rather between the one with rvfi_intr and the one before",
        "Verification Goal": "(Other items cover this in more specific detail)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "Pre-interrupt instruction",
        "Feature Description": "The instruction retired before the interrupt has none of the interrut-related side-effects, and the instruction retired after the interrupt does have the side-effects",
        "Verification Goal": "Check that when an instruction retires with rvfi_intr, then the previous retirement did not include any interrupt-related side-effects (unless that too had rvfi_intr high): pc, mstatus, mcause, mepc",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "Post-interrupt instruction",
        "Feature Description": "On the instruction that has rvfi_intr, the interrupt-related side-effects shall be visible: pc update (rvfi_pc_rdata), csr updates (rvfi_csr_*_rmask, rvfi_csr_*_rdata)",
        "Verification Goal": "Check that when an instruction retires with rvfi_intr, then it does include interrupt-related side-effects: pc, mstatus, mcause, mepc",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "RVFI",
        "Sub Feature": "NMI",
        "Feature Description": "For rvfi_intr, NMIs counts just like normal interrupts",
        "Verification Goal": "Check that after triggering an NMI then rvfi_intr becomes high",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "Never masked by interrupt enable bits",
        "Feature Description": "Neither shall the state of the mstatus.MIE bit nor shall the mie register stop an NMI from taking effect",
        "Verification Goal": "For all values of {mstatus.MIE, mie(all ones/zeros)}, check that triggering an NMI works the same",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "Masked by debug mode",
        "Feature Description": "While in debug mode, then NMIs are masked and aren't taken",
        "Verification Goal": "Check that an NMI triggering while in debug mode does not immediately jump to the debug handler with corresponding side-effects",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "Masked by single stepping with stepie=0",
        "Feature Description": "While single stepping with stepie=0, then NMIs are masked and aren't taken",
        "Verification Goal": "Check that an NMI triggering while single stepping with stepie=0 does not immediately jump to the debug handler with corresponding side-effects",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "Out of reset",
        "Feature Description": "Unlike normal interrupts which are disabled at reset, NMIs cannot be disabled, so it is possible to trigger an NMI on the very first instruction",
        "Verification Goal": "Trigger an NMI as the very first executed instruction and see that the NMI is taken",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "Target address",
        "Feature Description": "When an NMI is detected the core jumps immediately to nmi_addr_i",
        "Verification Goal": "Check that the core starts executing at PC=nmi_addr_i when an NMI is taken",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "Address change",
        "Feature Description": "After the core has been enabled with fetch_enable_i, then nmi_addr_i cannot change",
        "Verification Goal": "Check that nmi_addr_i never changes value after fetch_enable_i has risen (this will verify the verification environment more than the core)",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "Address alignment",
        "Feature Description": "nmi_addr_i must be word aligned",
        "Verification Goal": "Check that nmi_addr_i is always word aligned (this will verify the verification environment more than the core)",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "NMI",
        "Sub Feature": "nmip bit in dcsr",
        "Feature Description": "dcsr.nmip shall indicate if an NMI is pending or not",
        "Verification Goal": "Check that when an NMI is pending then dcsr.nmip reads as 1, and vice versa when no NMI is pending",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "RVPriv1.11",
        "Feature": "NMI",
        "Sub Feature": "nmip from debug/not",
        "Feature Description": "The dcsr.nmip bit should work whether in debug mode or not",
        "Verification Goal": "Have an assertion cover statement check that nmip can get asserted while in debug mode, and another for nmip getting asserted while not in debug mode",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "mepc updated",
        "Feature Description": "mepc is updated with the next instruction that was about to be executed when the NMI was taken",
        "Verification Goal": "Check that when taking an NMI then mepc gets updated correctly",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "mcause updated",
        "Feature Description": "mcause is updated with the right exception code (128 load, 129 store)",
        "Verification Goal": "Check that when taking an NMI then mcause gets updated correctly",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "mstatus.mie updated",
        "Feature Description": "When entering an interrupt handler, hardware disables interrupts globally, and this should also hold for NMIs",
        "Verification Goal": "Check that when an NMIs handler starts executing, then mstatus.mie is disabled",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "mstatus.mpie updated",
        "Feature Description": "When entering an interrupt handler, as hardware disables interrupts globally it must also save the previous setting in MPIE",
        "Verification Goal": "Check that when an NMIs handler starts executing, then mstatus.mpie get set to the previous mstatus.mie",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "Priority",
        "Feature Description": "Store bus fault has the highest priority, then load bus fault, then all the other interrupts with their respective priorities",
        "Verification Goal": "Check that when load bus fault occur at the same time as a normal interrupt then the NMI gets priority. Check that when store bus fault occur at the same time as a normal interrupt then the NMI gets priority. Check that when load bus fault occur at the same time as a store bus fault then the store NMI gets priority.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "UM 612b47",
        "Feature": "NMI",
        "Sub Feature": "Eventually taken",
        "Feature Description": "An NMI shall be taken, unless if the core is in debug mode or is blocked by external interfaces (rvalid, fence_flush_ack, etc), and the taking happens within a fixed number of cycles",
        "Verification Goal": "Check that when conditions are right, then the NMI gets taken within expected time",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "NMI",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Check that when conditions are right, then the NMI gets taken within expected time",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "NMI",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Check that when conditions are right, then the NMI gets taken within expected time",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "NMI",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Check that when conditions are right, then the NMI gets taken within expected time",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "NMI",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Check that when conditions are right, then the NMI gets taken within expected time",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "NMI",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Check that when conditions are right, then the NMI gets taken within expected time",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": " -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- END -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "Feature": "NMI",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Check that when conditions are right, then the NMI gets taken within expected time",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    }
]